#!/usr/bin/perl
use strict; use warnings;
use List::Util 'sum';
use Data::Dumper;
use feature 'say';

sub string_to_grid {
    my $string = shift;
    return [
        map {
            [ map { $_ eq '#' ? 1 : 0 } split //, $_ ];
        } split /\n/, $string,
    ]
}
sub grid_to_string {
    my $grid = shift;
    return join "\n", map {
        join '', map {
            $_ ? '#' : '.';
        } @$_;
    } @$grid;
}

sub next_generation {
    my $grid = shift;

    my $width = @{$grid->[0]};
    my $dummy = [ (0) x $width ];
    my @rows = ($dummy, @$grid, $dummy);

    my @new_rows;
    for my $y (1..@$grid) {
        my @above = @{ $rows[$y-1] };
        my @this  = @{ $rows[$y  ] };
        my @below = @{ $rows[$y+1] };

        my @arrays = (
            \@this,
            # then the neighbours
            [@above[1..($width-1)], 0],
            \@above,
            [0, @above],
            [@this[1..($width-1)], 0],
            [0, @this],
            [@below[1..($width-1)], 0],
            \@below,
            [0, @below],
            );
        push @new_rows, [ map {
            my ($this, @neighbours) = @$_;
            my $n = sum @neighbours;
            if ($this) {
                $n < 2 ? 0 : $n > 3 ? 0 : 1; # die if <2 or >3 neighbours
            }
            else {
                $n == 3 ? 1 : 0; # dead cells born if 3 neighbours
            }
        } multizip(@arrays) ];
    }
    return \@new_rows;
}

sub multizip {
    my @arrays = map [@$_], @_;
    my @list;
    my $exhausted;
    {
        my @row = map { my $x = shift @$_; defined $x ? $x : $exhausted++ } @arrays;
        do { push @list, \@row; redo } unless $exhausted;
    }
    return @list;
}

my $grid = string_to_grid(<<EOF);
............................................
............................................
.........................#..................
.......................#.#..................
.............##......##............##.......
............#...#....##............##.......
.##........#.....#...##.....................
.##........#...#.##....#.#..................
...........#.....#.......#..................
............#...#...........................
.............##.............................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
............................................
EOF
for (1..1000) {
    say grid_to_string($grid); say "!\n";
    $grid = next_generation($grid);
}

