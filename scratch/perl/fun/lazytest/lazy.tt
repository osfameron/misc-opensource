#!/usr/bin/perl
use strict; use warnings;

use Test::More 'no_plan';
use [% module %];
my $done_testing;
use Test::Exception;

diag "Testing [% module %]";
CALCULATE: {
    my $x;
    lives_ok {
        [% lazy('$x', '1/0') %]
    } '1/0';
    dies_ok {
        $x + 0;
    } 'calculation forced die';
}
ASSIGN: {
    my $x;
    lives_ok {
        [% lazy('$x', '1/0') %]
    } '1/0';
    lives_ok {
        my $y = $x;
    } "assignment doesn't force"
}
sub Foo::foo { 'RETVAL' }
METHOD: {
    [% lazy('$x', 'bless {}, "Foo"', 1) %]
    lives_ok {
        is ($x->foo, 'RETVAL', 'Return value of method call OK');
    } "method call lives";
}
[% IF anon %]
ANON: {
    sub List::tail {
        my $list = shift;
        return $list->[1];
    }
    my $arr = bless [ 1, [% lazy('', 'bless {}, "Foo"') %] ], 'List';
    lives_ok {
        is ($arr->tail->foo, 'RETVAL', 'Return value of anon method call OK');
    } "method call lives";
}
[% END %]

DESTROY: {
    sub node {
        return bless \@_, 'DestroyList';
    }
    sub list {
        my ($head, @tail) = @_
            or return;
        [% lazy('$tail', 'list(@tail)', 1) %];
        # note that we can't do return [$head, $tail] in V::L as it will force
        return node($head, $tail);
    }
    my $DestroyCount = 0;
    use List::Util 'max';
    sub DestroyList::DESTROY {
        my $self = shift;
        $DestroyCount = max($DestroyCount, $self->[0]);
        die if $self->[0] > 5; # shouldn't get called
    }
    END { 
        ok $DestroyCount <= 5, "DestroyCount OK";
        diag "DestroyCount = $DestroyCount";
    }
    my $y = list2(1..10);
    my $item = $y->[1][1][1][1]; # force first 5 elements
}

RECURSE: {
    sub node2 {
        return \@_;
    }
    sub list2 {
        my ($head, @tail) = @_
            or return;
        [% lazy('$tail', 'list(@tail)', 1) %];
        return node2($head, $tail);
    }

    require Test::NoWarnings;
    my $x = list(1..5_000);
    Test::NoWarnings::had_no_warnings();
}

$done_testing++;
END {
    ok $done_testing, 'Finished testing OK';
}
